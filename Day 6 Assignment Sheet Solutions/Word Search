                                                                                                 Code

class Solution {
    public boolean helper(int cr,int cc,int idx,char[][]board,String word){
        if(idx == word.length()){
            return true;
        }
        if(cr>=board.length || cr<0 || cc>=board[0].length || cc<0){
            return false;
        }
        if(board[cr][cc] != word.charAt(idx)){
            return false;
        }
        char temp = board[cr][cc];
        board[cr][cc] = '.';

        boolean ans = helper(cr,cc+1,idx+1,board,word) || helper(cr,cc-1,idx+1,board,word) || helper(cr+1,cc,idx+1,board,word) || helper(cr-1,cc,idx+1,board,word);

        board[cr][cc] = temp;
        return ans;
    }
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(word.charAt(0) == board[i][j]){
                   if(helper(i,j,0,board,word)){
                    return true;
                   }
                }
            }
        }
        return false;
    }

}


                                                                                              Complexity Analysis



Time Complexity : O(N*M*4^L)
Space Complexity : O(L)


                                                                                                      Testcases


Testcase 1

Input

board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]
word = "ABCCED"

Output
true
Expected
true

Testcase 2

Input

board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]
word = "SEE"

Output
true
Expected
true
