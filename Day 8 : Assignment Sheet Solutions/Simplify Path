                                                                                                  Code
import java.util.ArrayDeque;
import java.util.Deque;

class Solution {
    public String simplifyPath(String path) {
        Deque<String> dir_stack = new ArrayDeque<>();

        for (String dir : path.split("/")) {
            if (!dir_stack.isEmpty() && dir.equals("..")) {
                dir_stack.removeLast();
            } else if (!dir.equals(".") && !dir.equals("") && !dir.equals("..")) {
                dir_stack.addLast(dir);
            }
        }

        StringBuilder simplified_path = new StringBuilder();
        for (String dir : dir_stack) {
            simplified_path.append("/").append(dir);
        }

        return simplified_path.length() == 0 ? "/" : simplified_path.toString();
    }
}


                                                                                    Complexity Analysis

TC : O(n)  
SC : O(n)



                                                                                            Testcases

Testcase 1

Input
path = "/home/"

Output
"/home"

Expected
"/home"


Testcase 2

Input
path = "/home//foo/"

Output
"/home/foo"

Expected
"/home/foo"


Testcase 3

Input
path = "/a/./b/../../c/"

Output
"/c"

Expected
"/c"
