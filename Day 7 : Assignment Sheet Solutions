                                                                                              Code


class Solution {
    public int helper(int idx,int[]nums,int[]dp){
        if(idx == 0){
            return nums[0];
        }
        if(idx<0){
            return 0;
        }
        if(dp[idx]!=-1){
            return dp[idx];
        }

        int notake = helper(idx-1,nums,dp);
        int take = nums[idx] + helper(idx-2,nums,dp);

        return dp[idx] = Math.max(notake,take);
    }
    public int rob(int[] nums) {
        int[]dp = new int[nums.length];
        Arrays.fill(dp,-1);
        return helper(nums.length-1,nums,dp);
    }
}

                                                                                      Complexity Analysis


Time Complexity :  O(n)
Space Complexity : O(n)


                                                                                             Testcases

Testcase 1

Input

nums = [1,2,3,1]

Output
4
Expected
4

Testcase 2

Input

nums = [2,7,9,3,1]

Output
12
Expected
12
